name: aspnetcore.k8s

on: workflow_dispatch

#on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

env:
  AZ_RG_NAME: 'rg-dotnet-containerapp'
  AZ_ACR_NAME: 'acrdotnetcontainerapp'
  AZ_AKS_NAME: 'aksdotnetcontainerapp'
  AZ_SQLSERVER_NAME: 'sqldotnetcontainerapp'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Change Version variable
      uses: microsoft/variable-substitution@v1 
      with:
        files: 'src/aspnetcorewebapp/appsettings.json'
      env:
        Version: ${{ GITHUB.RUN_NUMBER }}
    
    - name: Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set the value in bash
      id: setup-variables
      run: |
        url_acr=$(az acr show -n ${{ env.AZ_ACR_NAME }} --query loginServer --output tsv)
        login_acr=$(az acr credential show -n ${{ env.AZ_ACR_NAME }} --query username --output tsv)
        password_acr=$(az acr credential show -n ${{ env.AZ_ACR_NAME }} --query passwords[0].value --output tsv)

        echo "::add-mask::$url_acr"
        echo "::add-mask::$login_acr"
        echo "::add-mask::$password_acr"

        echo "ACR_URL=$url_acr" >> $GITHUB_ENV
        echo "ACR_LOGIN=$login_acr" >> $GITHUB_ENV
        echo "ACR_PASSWORD=$password_acr" >> $GITHUB_ENV
        
    - name: Docker Login
      uses: docker/login-action@v1.14.1
      with:
        registry: ${{ env.ACR_URL }}
        username: ${{ env.ACR_LOGIN }}
        password: ${{ env.ACR_PASSWORD }}
    
    - name: Build and push aspnetcorewebapi image
      uses: docker/build-push-action@v2.10.0
      with:
        context: src/aspnetcorewebapi
        file: src/aspnetcorewebapi/Dockerfile
        tags: |
          ${{ env.ACR_URL }}/aspnetcorewebapi:${{ GITHUB.RUN_NUMBER }}
          ${{ env.ACR_URL }}/aspnetcorewebapi:latest
        push: true
        
    - name: Build and push aspnetcorewebapp image
      uses: docker/build-push-action@v2.10.0
      with:
        context: src/aspnetcorewebapp
        file: src/aspnetcorewebapp/Dockerfile
        tags: | 
          ${{ env.ACR_URL }}/aspnetcorewebapp:${{ GITHUB.RUN_NUMBER }}
          ${{ env.ACR_URL }}/aspnetcorewebapp:latest
        push: true
    
    - name: Replace variables
      run: |
        echo Build Number = ${{ GITHUB.RUN_NUMBER }}
        urlApp=${{ env.ACR_URL }}/aspnetcorewebapp:${{ GITHUB.RUN_NUMBER }}
        urlApi=${{ env.ACR_URL }}/aspnetcorewebapi:${{ GITHUB.RUN_NUMBER }}

        sed -i "s|_ImageUrlApp_|$urlApp|g" src/kubernetes-containerapp.yaml
        sed -i "s|_ImageUrlApi_|$urlApi|g" src/kubernetes-containerapp.yaml
        sed -i "s|_ConnString_|${{ secrets.SQL_CONNECTION }}|g" src/kubernetes-containerapp.yaml

    - name: Upload Kubernetes files
      uses: actions/upload-artifact@v3.0.0
      with:
        name: k8s
        path: src/kubernetes-containerapp.yaml
        
  release:
    needs: build
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - name: Download k8s artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: k8s
          path: my-app-artifact
      
      - name: Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set the value in bash
        id: setup-variables
        run: |
          url_acr=$(az acr show -n ${{ env.AZ_ACR_NAME }} --query loginServer --output tsv)
          login_acr=$(az acr credential show -n ${{ env.AZ_ACR_NAME }} --query username --output tsv)
          password_acr=$(az acr credential show -n ${{ env.AZ_ACR_NAME }} --query passwords[0].value --output tsv)

          echo "::add-mask::$url_acr"
          echo "::add-mask::$login_acr"
          echo "::add-mask::$password_acr"

          echo "ACR_URL=$url_acr" >> $GITHUB_ENV
          echo "ACR_LOGIN=$login_acr" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$password_acr" >> $GITHUB_ENV

      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - name: Deploy set context
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.AZ_AKS_NAME }}
          resource-group: ${{ env.AZ_RG_NAME }}
      
      # Create image pull secret for ACR
      - name: Create k8s secret
        uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.ACR_URL }}
          container-registry-username: ${{ env.ACR_LOGIN }}
          container-registry-password:  ${{ env.ACR_PASSWORD }}
          secret-name: mysecret
          namespace: default
          arguments: --force true

      # Deploy app to AKS
      - name: Deploy to k8s
        uses: azure/k8s-deploy@v1
        with:
          manifests: my-app-artifact/kubernetes-containerapp.yaml
          imagepullsecrets: mysecret
          namespace: default